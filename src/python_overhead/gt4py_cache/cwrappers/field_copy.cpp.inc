//Generated by gt4py: gtfn backend. copied from gt4py_cache/field_copy_<hash>
//TODO [ml] remove again

#include <gridtools/fn/backend/naive.hpp>
            
    #include <cmath>
    #include <gridtools/fn/cartesian.hpp>

    namespace generated{

    namespace gtfn = ::gridtools::fn;

    namespace{
    using namespace ::gridtools::literals;

    
            struct I_t{};
        constexpr inline I_t I{};
        
    
        struct _fun_1 {
            constexpr auto operator()() const {
                return [](auto const& x){
                    return gtfn::deref(x);
                };
            }
        };
    

    inline auto field_copy = [](auto... connectivities__){
        return [connectivities__...](auto backend, auto&& a,auto&& b,auto&& __a_size_0,auto&& __b_size_0){
            auto tmp_alloc__ = gtfn::backend::tmp_allocator(backend);
            
            
        make_backend(backend, gtfn::cartesian_domain(::gridtools::hymap::keys<I_t>::make_values((__b_size_0-0_c)), ::gridtools::hymap::keys<I_t>::make_values(0_c))).stencil_executor()().arg(b).arg(a).assign(0_c, _fun_1() , 1_c).execute();
        
        };
    };
    }
    }
    
            template <class BufferT0, class BufferT1>
        decltype(auto) field_copy(BufferT0&& a, BufferT1&& b, long __a_size_0, long __b_size_0) {
        return generated::field_copy()(gridtools::fn::backend::naive{}, a, b, __a_size_0, __b_size_0);
    }